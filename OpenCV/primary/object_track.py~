import numpy as np
import cv2 as cv
import time
import imutils
def nothing(x):
    pass

#cap = cv.VideoCapture('http://192.168.0.101:8080/video')
cap = cv.VideoCapture(0)

#Create the trackbar stuff for controlling the upper HSV boundaries
cv.namedWindow('Trackbars')

cv.createTrackbar('L-H','Trackbars',0,179,nothing)
cv.createTrackbar('L-S','Trackbars',0,255,nothing)
cv.createTrackbar('L-V','Trackbars',0,255,nothing)
cv.createTrackbar('U-H','Trackbars',179,179,nothing)
cv.createTrackbar('U-S','Trackbars',255,255,nothing)
cv.createTrackbar('U-V','Trackbars',255,255,nothing)


#Check if the webcam has been opened
if cap.isOpened() == False:
    print("There has been an error in opening the camera, moron.")
#Setting exit flag
break_flag = 0
#Run when webcam is up and running
while(cap.isOpened()):
    #Save each frame to the variable frame(Frame is the original stream) 
    ret,frame = cap.read()
    blurred_frame = cv.GaussianBlur(frame, (5,5), 0)
    
    if ret == True:

        #Convert rom BGR to HSV(for generating the mask)
        img = cv.cvtColor(blurred_frame, cv.COLOR_BGR2HSV)
        
        
        #Getting the trackbar position
        l_h = cv.getTrackbarPos('L-H','Trackbars')
        l_s = cv.getTrackbarPos('L-S','Trackbars')
        l_v = cv.getTrackbarPos('L-V','Trackbars')
        u_h = cv.getTrackbarPos('U-H','Trackbars')
        u_s = cv.getTrackbarPos('U-S','Trackbars')
        u_v = cv.getTrackbarPos('U-V','Trackbars')
        
        #Setting the treshold values for the camera
        lower_val = np.array([l_h,l_s,l_v])
        upper_val = np.array([u_h,u_s,u_v])
        mask = cv.inRange(img,lower_val,upper_val)

        #Using contours(Read that more)
        _,contours,_ = cv.findContours(mask,cv.RETR_TREE,cv.CHAIN_APPROX_SIMPLE)
        #cv.drawContours(frame,contours,-1,(0,255,0),3)
        #Finding the relevant contour
        max_contour = max(cv.contours)
        #Find the center of the contours
        for c in contours:
            area = cv.contourArea(c)
            if area>1000:
                M = cv.moments(c)
                cX = int(M["m10"]/M["m00"])
                cY = int(M["m01"]/M["m00"])
                cv.drawContours(frame,[c],-1,(0,255,0), 2)
                cv.circle(frame,(cX,cY),7,(255,255,255),-1)
                cv.putText(frame, "center", (cX - 20, cY - 20),cv.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
                
                print 'hi'
                res = cv.bitwise_and(frame,frame,mask =mask)
                # Display the resulting frame
                cv.imshow('Normal', frame)
                cv.imshow('Mask',mask)
                cv.imshow('Normal && Mask',res)

                #Close when 'q' is pressed
                if cv.waitKey(1) & 0xFF == ord('q'):
                    break_flag = 1
                    break
        #Setting up an escape sequence when 'q' is pressed
        if break_flag == 1:
            break
        else:
            continue

    else:
        print('The camera was closed')
        break


# When everything is done release the capture and close the windows
cap.release()
cv.destroyAllWindows()
